#!/bin/bash
#
# giti: An interactive prompt for Git
#
# TODO: Path wrong when in symlink to repo

set -o errexit

# Force script to run in interactive mode
[[ "$-" != *i* ]] && exec /bin/bash -i "$0" "$@"

# Disable interactive command history (handled manually)
set +o history

# Colors
 faint='\x01\e[0;2m\x02'
 green='\x01\e[32;22m\x02'
bgreen='\x01\e[32;1m\x02'
yellow='\x01\e[33;22m\x02'
 bblue='\x01\e[34;1m\x02'
  cyan='\x01\e[36;22m\x02'
 reset='\x01\e[0m\x02'

## Environment variable defaults
: ${GITI_HISTFILE:=$HOME/.giti_history}          # History file
: ${GITI_ALIASES:=$HOME/.bash_aliases}           # User aliases file
: ${COLORS:=$(tput colors)}                      # TODO Make this smarter

# Prompt
# GIT wdir head
# >
if [ $COLORS -ge 8 ]; then
	: ${GITI_PS1="\n${green}GIT $bblue%s$cyan%s  %b\n$bblue> $reset"}
else
	: ${GITI_PS1="\nGIT %s %s  (%s)\n> "}
fi

get_prefix() {
	local prefix

	if prefix="/$(git rev-parse --show-prefix 2>/dev/null)"; then
		prefix="${prefix%/}" # Remove trailing slash
	else
		# Not in a git repository
		prefix="${PWD/#$HOME/\~}" # Use working directory
	fi

	echo -n "$prefix"
}

get_root() {
	local root

	if git rev-parse 2>/dev/null; then # Are we in a repo?
		local wdir="${PWD/#$HOME/\~}"
		root="${wdir%$(get_prefix)}"
	else
		root=""
	fi

	echo -n "$root"
}

get_head() {
	local head
	local head_color

	if git rev-parse 2>/dev/null; then # Are we in a repo?
		if head="$(git symbolic-ref --short -q HEAD)"; then # Are we on a branch?
			head_color="$bgreen"
		else
			head="$(git rev-parse --short HEAD)" # Use abbreviated SHA-1 of commit
			head_color="$yellow"
		fi
	else
		head="Not in a Git repository"
		head_color="$faint"
	fi

	if [ $COLORS -ge 8 ]; then
		head="$head_color$head$reset"
	fi

	echo -n "$head"
}

# Get current working info and print prompt
prompt() {
	printf "$GITI_PS1" "$(get_root)" "$(get_prefix)" "$(get_head)"
}

commands() {
	local aliases
	local commandlist
	
	# Regenerate every loop in case aliases change
	aliases="$(
		git config -l |
		sed -e '/^[\t ]*alias/!d' -e 's/alias.//' -e 's/=.*//' |
		tr '\n' '|'
	)"
	
	commandlist="$corecommands$aliases"
	echo -n "(${commandlist%|})"
}

# Process command-line args
if [ $# -gt 0 ]; then
	if [ -d "$1" ]; then
		start_dir="$1"
	else
		echo "Error: '$1' is not a directory" >&2
		exit 1
	fi
fi

# Generate list of Git commands
corecommands="$(
	find -L "$(git --exec-path)" -type f -name 'git-*' -perm /111 -print0 |
	sed -z -e "s:.*/git-::" -e "s/\.exe$//" |
	tr '\0' '|'
)"

# Source aliases file
[ -f "$GITI_ALIASES" ] && source "$GITI_ALIASES"

# Start in directory if argument is given
[ -n "$start_dir" ] && cd "$start_dir"

# Read history file into current session history
HISTFILE=$GITI_HISTFILE
history -c # Clear history before reading
history -r

# Set interactive options
set +o errexit

# Main command loop
while [ ! $exit_flag ]; do
	read -erp "$(prompt)"
	history -s "$REPLY" # Add command to history
	
	case "$REPLY" in
		"")   continue ;;
		exit) exit_flag=1 ;;
		!*)   eval "${REPLY:1}" ;;
		*)
			if [[ "$REPLY" =~ ^[[:blank:]]*$(commands)([[:blank:]].*)?$ ]]
			then
				eval "git $REPLY"
			else
				eval "$REPLY"
			fi
	esac
done

# Write current session history to history file
history -w
# TODO Truncate history file
