#!/bin/bash

case "$1" in
	direct | -direct | --direct )
		if command -v tput >/dev/null 2>&1; then
			cols=$(tput cols)
		else
			cols=80
		fi

		resx=$(($cols-4))
		[ $resx -gt 255 ] && resx=255

		for c in r g b y m c w; do
			case $c in
				r) idx=1; i=65536 ;;
				g) idx=2; i=256 ;;
				y) idx=3; i=$((65536 + 256)) ;;
				b) idx=4; i=1 ;;
				m) idx=5; i=$((65536 + 1)) ;;
				c) idx=6; i=$((256 + 1)) ;;
				w) idx=7; i=$((65536 + 256 + 1)) ;;
			esac
			printf "%s " "$(tput setab 0)"
			for v in $(seq 0 $resx); do
				printf "%s " "$(tput setab $(( $i*($v*255/$resx) )))"
			done
			printf "%s " "$(tput setab $idx)"
			echo -e "\e[0m" # End of line
		done
		;;
	24 | -24 | --24 )
		if command -v tput >/dev/null 2>&1; then
			lines=$(tput lines)
			cols=$(tput cols)
		else
			lines=24
			cols=80
		fi

		if tput setrgbb >/dev/null 2>&1; then
			setrgbb=$(tput setrgbb | sed 's/%p.%d/%s/g')
		else
			setrgbb='\e[48;2;%s;%s;%sm'
		fi

		resx=$(($cols-2))
		resy=$(($lines-8))
		if [[ $resy -gt $(($resx/3)) ]]; then
			resy=$((resx/3))
		fi

		echo
		for y in $(seq 0 $resy); do
			y_scaled=$(( $y*255/$resy ))

			b=$y_scaled

			for x in $(seq 0 $resx); do
				x_scaled=$(( $x*511/$resx ))

				xy=$(($x_scaled + $y_scaled))
				if   [ $xy -le 255 ]; then r=255
				elif [ $xy -ge 511 ]; then r=0
				else                       r=$((511 - $xy))
				fi

				xy=$(( $x_scaled + (255 - $y_scaled) ))
				if   [ $xy -le 255 ]; then g=0
				elif [ $xy -ge 511 ]; then g=255
				else                       g=$(($xy - 255))
				fi

				printf "$setrgbb " $r $g $b
			done
			echo -e "\e[0m" # End of line
		done
		;;

	256 | -256 | --256 )
		for color in $(seq 0 255); do
			case $color in
				0|16|232) echo # Add blank line at start of each section
			esac
			echo -en "\e[48;5;${color}m  "
			case $color in
				7|15|51|87|123|159|195|231|255) echo -e "\e[0m" # End of line
			esac
		done
		;;

	16 | -16 | --16 )
		for bold in 4 10; do
			echo -e "\e[0m"
			for color in $(seq 0 7); do
				echo -en "\e[${bold}${color}m  \e[0m"
			done
		done
		echo
		;;

	all | -all | --all )
		"$0" 16 && "$0" 256 && "$0" 24
		;;

	*)
		for fg in 9 $(seq 0 7); do
			for bold in 1 22 2; do
				echo -e "\e[0m"
				for bg in 9 $(seq 0 7); do
					echo -en "\e[3${fg};4${bg};${bold}m Abcd \e[0m"
				done
			done
		done
		echo
		;;
esac

